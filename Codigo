#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_SIZE 100

// Define uma estrutura para um elemento da pilha
typedef struct {
    int top;
    char items[MAX_SIZE];
} Stack;

// Inicializa a pilha
void init(Stack *s) {
    s->top = -1;
}

// Verifica se a pilha está vazia
int is_empty(Stack *s) {
    return s->top == -1;
}

// Verifica se a pilha está cheia
int is_full(Stack *s) {
    return s->top == MAX_SIZE - 1;
}

// Insere um elemento na pilha
void push(Stack *s, char c) {
    if (is_full(s)) {
        printf("Erro: pilha cheia\n");
        exit(1);
    }
    s->top++;
    s->items[s->top] = c;
}

// Remove um elemento da pilha
char pop(Stack *s) {
    if (is_empty(s)) {
        printf("Erro: pilha vazia\n");
        exit(1);
    }
    char c = s->items[s->top];
    s->top--;
    return c;
}

// Retorna o elemento no topo da pilha
char peek(Stack *s) {
    if (is_empty(s)) {
        printf("Erro: pilha vazia\n");
        exit(1);
    }
    return s->items[s->top];
}

// Verifica se um caractere é um operador
int is_operator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Verifica a precedência de um operador
int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    } else {
        return 0;
    }
}

// Converte uma expressão infixa em pós-fixa
void infix_to_postfix(char infix[], char postfix[]) {
    Stack s;
    init(&s);
    int i, j;
    char c, t;
    for (i = 0, j = 0; infix[i] != '\0'; i++) {
        c = infix[i];
        if (isdigit(c)) {
            postfix[j] = c;
            j++;
        } else if (is_operator(c)) {
            while (!is_empty(&s) && precedence(peek(&s)) >= precedence(c)) {
                t = pop(&s);
                postfix[j] = t;
                j++;
            }
            push(&s, c);
        } else if (c == '(') {
            push(&s, c);
        } else if (c == ')') {
            while ((t = pop(&s)) != '(') {
                postfix[j] = t;
                j++;
            }
        }
    }
    while (!is_empty(&s)) {
        t = pop(&s);
        postfix[j] = t;
        j++;
    }
    postfix[j] = '\0';
}

// Converte uma expressão infixa em pré-fixa
void infix_to_prefix(char infix[], char prefix[]) {
char infix_reverse[MAX_SIZE];
int i, j;
for (i = strlen(infix) - 1, j = 0; i >= 0; i--, j++) {
infix_reverse[j] = infix[i];
}
infix_reverse[j] = '\0';
for (i = 0; infix_reverse[i] != '\0'; i++) {
if (infix_reverse[i] == '(') {
infix_reverse[i] = ')';
} else if (infix_reverse[i] == ')') {
infix_reverse[i] = '(';
}
}
char postfix[MAX_SIZE];
infix_to_postfix(infix_reverse, postfix);
int n = strlen(postfix);
for (i = n - 1, j = 0; i >= 0; i--, j++) {
prefix[j] = postfix[i];
}
prefix[j] = '\0';
}

// Realiza uma operação aritmética com dois operandos e um operador
double apply_operator(double a, double b, char op) {
if (op == '+') {
return a + b;
} else if (op == '-') {
return a - b;
} else if (op == '*') {
return a * b;
} else if (op == '/') {
return a / b;
} else {
printf("Erro: operador inválido\n");
exit(1);
}
}

// Calcula o resultado de uma expressão pós-fixa
double evaluate_postfix(char postfix[]) {
Stack s;
init(&s);
int i;
char c;
double a, b, result;
for (i = 0; postfix[i] != '\0'; i++) {
c = postfix[i];
if (isdigit(c)) {
push(&s, c - '0');
} else if (is_operator(c)) {
b = pop(&s);
a = pop(&s);
result = apply_operator(a, b, c);
push(&s, result);
}
}
result = pop(&s);
if (!is_empty(&s)) {
printf("Erro: expressão inválida\n");
exit(1);
}
return result;
}

int main() {
char expression[MAX_SIZE];
char infix[MAX_SIZE], postfix[MAX_SIZE], prefix[MAX_SIZE];
int choice;
double result;
printf("Escolha a opcao 1 e insira a expressão:\n");
printf("1. iniciar\n");
scanf("%d", &choice);
printf("Digite a expressão: ");
scanf("%s", expression);
switch (choice) {
case 1:
strcpy(infix, expression);
infix_to_postfix(infix, postfix);
printf("Expressão pós-fixa: %s\n", postfix);
infix_to_prefix(infix, prefix);
printf("Expressão pré-fixa: %s\n", prefix);
result = evaluate_postfix(postfix);
break;
case 2:
strcpy(postfix, expression);

printf("Expressão infixa: %s\n", infix);
infix_to_prefix(infix, prefix);
printf("Expressão pré-fixa: %s\n", prefix);
result = evaluate_postfix(postfix);
break;
case3:
strcpy(prefix, expression);

printf("Expressão infixa: %s\n", infix);
infix_to_postfix(infix, postfix);
printf("Expressão pós-fixa: %s\n", postfix);
result = evaluate_postfix(postfix);
break;
default:
printf("Opção inválida\n");
exit(1);
}
printf("Resultado: %.2f\n", result);
return 0;
}
